#!/usr/bin/python
__doc__ = 'PLOTEOS -- produce diagnostic plot of EoS data'
__usage__ = 'ploteos EoS.csv'
__author__ = 'philippe.landry@ligo.org'
__date__ = '09-2018'

import numpy as np
from optparse import OptionParser
from geteos import geteos
from crust import crust
from constants import rhonuc, c

parser = OptionParser(usage=__usage__, description=__doc__)
parser.add_option('-p', '--eospath', default='./dat/eos/', help='path to EoS data, DEFAULT="./dat/eos/"', metavar='eospath')
parser.add_option('-o', '--outpath', default='./plt/', help='path to output data, DEFAULT="./plt/"', metavar='outpath')
parser.add_option('-u', '--units', default='cgs', help='units for plot (cgs or rhonuc), DEFAULT="cgs"', metavar='units')
parser.add_option('-l', '--lims', default='Auto', help='x- and y-range limits for plot (e.g. 1e12,1e17,1e12,1e17), DEFAULT=Auto', metavar='lims')
parser.add_option('-x', '--xvar', default='rho', help='which variable to plot on x-axis (rho or p), DEFAULT="rho"', metavar='xvar')
parser.add_option('-c', '--crust', default='False', help='append crust EoS or not, DEFAULT=False', metavar='crust')
parser.add_option('-t', '--tag', default='diagnostic', help='tag for output data file, DEFAULT="diagnostic"', metavar='tag')

opts, args = parser.parse_args()
eospath = str(opts.eospath)
outpath = str(opts.outpath)
units = str(opts.units)
lims = str(opts.lims).split(',')
xvar = str(opts.xvar)
crust = opts.crust
tag = str(opts.tag)
eosname = str(args[0])

eosloc = eospath+eosname
eos = geteos(eosloc)
rhodat = eos[:,0] # rest-mass energy density in units of g/cm^3
pdat = eos[:,1] # pressure in units of g/cm^3
mudat = eos[:,2] # total energy density in units of g/cm^3

label = r'$[\mathrm{g}/\mathrm{cm}^3]$'
cs2units = 1e-4*c**2

if crust == True:
	
	rhodat = rhodat/rhonuc # rho in units of rhonuc
	pdat = pdat/rhonuc # p in units of rhonuc
	mudat = mudat/rhonuc # mu in units of rhonuc
	
	[rhodat,mudat,pdat] = crust(eos,pts=1e3) # affix low-density crust
	
	label = r'$[\rho_{\mathrm{nuc}}]$'
	cs2units = 1.
	
	if units != 'rhonuc': # convert back to g/cm^3 if desired
	
		rhodat = rhodat*rhonuc
		pdat = pdat*rhonuc
		mudat = mudat*rhonuc
		
		label = r'$[\mathrm{g}/\mathrm{cm}^3]$'
		cs2units = 1e-4*c**2
		
else:

	if units == 'rhonuc':
	
		rhodat = rhodat/rhonuc # rho in units of rhonuc
		pdat = pdat/rhonuc # p in units of rhonuc
		mudat = mudat/rhonuc # mu in units of rhonuc
		
		label = r'$[\rho_{\mathrm{nuc}}]$'
		cs2units = 1.

cs2dat = np.gradient(pdat)/np.gradient(mudat) # sound speed squared in units of c^2

import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt

plt.figure(1,figsize=(10.,10.))

if xvar=='p':

	plt.loglog(pdat,rhodat,lw=2,label=r'$\rho$')
	plt.loglog(pdat,mudat,lw=2,label=r'$\mu$')
	plt.loglog(pdat,cs2units*cs2dat,lw=2,label=r'${c_s}^2$')
	plt.xlabel(r'$p$', fontsize = 28)
	plt.ylabel(label, fontsize = 28)

else:

	plt.loglog(rhodat,pdat,lw=2,label=r'$p$')
	plt.loglog(rhodat,mudat,lw=2,label=r'$\mu$')
	plt.loglog(rhodat,cs2units*cs2dat,lw=2,label=r'${c_s}^2$')
	plt.xlabel(r'$\rho$', fontsize = 28)
	plt.ylabel(label, fontsize = 28)

if len(lims)>1:

	xlims = [float(lims[0]),float(lims[1])]
	ylims = [float(lims[2]),float(lims[3])]
	
	plt.xlim(xlims[0],xlims[1])
	plt.ylim(ylims[0],ylims[1])

plt.legend(loc=0)
plt.savefig(outpath+'eos_'+tag+'.png')

