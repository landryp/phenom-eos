#!/usr/bin/python
__doc__ = 'ADDCRUST -- append low-density SLy crust to existing EoS in [pressurec2,energy_densityc2,baryon_density] [g/cm^3] csv format'
__usage__ = 'addcrust EoS.csv'
__author__ = 'philippe.landry@ligo.org'
__date__ = '03-2019'

import numpy as np
from optparse import OptionParser
import os
from phenomeos.crust import crust
from phenomeos.constants import *

parser = OptionParser(usage=__usage__, description=__doc__)
parser.add_option('-s', '--searchrng', default='3.8e11,3.8e14', help='baryon density [g/cm^3] search range for crust-core interface, DEFAULT=3.8e11,3.8e14', metavar='3.8e11,3.8e14')
parser.add_option('-n', '--numpts', default=1e2, help='number of crust data points to append, DEFAULT=100', metavar='100')
parser.add_option('-o', '--outpath', default='speccr.csv', help='path to output eos table, DEFAULT="speccr.csv"', metavar='/path/to/output.csv')
parser.add_option('-r', '--rhos', default=0, help='comma-separated list of rest-mass densities [g/cm^3] at which to return the crust data, DEFAULT=Auto', metavar=0)
parser.add_option('-R', '--rhoi', default=0.28, help='lowest rest-mass density [g/cm^3] at which to return crust data, DEFAULT=0.28', metavar=0.28)

opts, args = parser.parse_args()
eospath = str(args[0])
srange = str(opts.searchrng)
srange = [float(val) for val in srange.split(',')]
numpts = int(float(opts.numpts))
outpath = str(opts.outpath)
rholist = str(opts.rhos).split(',')
if len(rholist) > 1: rholist = [float(rhopt) for rhopt in rholist]
rhoi = float(opts.rhoi)

if not os.path.exists(os.path.dirname(outpath)): os.makedirs(os.path.dirname(outpath))

outfile = open(outpath,"w")

# LOAD EOS DATA

eosdat = np.genfromtxt(eospath,names=True,delimiter=',')
rhocoredat = eosdat['baryon_density'] # rest-mass energy density in units of g/cm^3
pcoredat = eosdat['pressurec2'] # pressure in units of g/cm^3
mucoredat = eosdat['energy_densityc2'] # total energy density in units of g/cm^3
eoszip = [rhocoredat,pcoredat,mucoredat]

# AFFIX LOW-DENSITY CRUST

[rhodat,mudat,pdat] = crust(eoszip,numpts,srange,rhoi,rholist) # returns crust EoS data up to crust-core interface in units of rhonuc
	
rhodat = rhodat*rhonuc # convert back to g/cm^3
pdat = pdat*rhonuc
mudat = mudat*rhonuc

# SAVE NEW CRUST + CORE EOS DATA

outfile.write('pressurec2,energy_densityc2,baryon_density\n')

for i in range(len(rhodat)): # first print crust data points up to interface density

	p = pdat[i]
	mu = mudat[i]
	rho = np.asscalar(rhodat[i])

	outfile.write('{0},{1},{2} \n'.format(p,mu,rho))

j = 0	
while (j < len(rhocoredat)) and (rhocoredat[j] <= rhodat[-1]): # then skip core data below interface density

	j = j+1

while j < len(rhocoredat): # then print original core data above interface density

	p = pcoredat[j]
	mu = mucoredat[j]
	rho = rhocoredat[j]
	
	outfile.write('{0},{1},{2} \n'.format(p,mu,rho))
	
	j = j+1
	

