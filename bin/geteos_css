#!/usr/bin/python
__doc__ = 'GETEOS_CSS -- save EoS data for specified constant sound speed EoS, stitched to chosen low-density EoS'
__usage__ = 'geteos_css loweos.csv'
__author__ = 'philippe.landry@ligo.org'
__date__ = '02-2019'

import numpy as np
from optparse import OptionParser
import os
from scipy.interpolate import interp1d
from scipy.optimize import minimize_scalar
from phenomeos.get_css import css

parser = OptionParser(usage=__usage__, description=__doc__)
parser.add_option('-p', '--params', default='cssparams.in', help='name of css parameters input file OR comma-separated input parameters [p_tr (g/cm^3), Delta_e (e_tr), cqm2 (c^2)], DEFAULT=cssparams.in', metavar='5e14,0.6,0.9')
parser.add_option('-n', '--numpts', default=100, help='number of EoS data points to return, DEFAULT=100', metavar='100')
parser.add_option('-m', '--pmax', default=1e17, help='maximum pressure to return [g/cm^3], DEFAULT=1e17', metavar='1e17')
parser.add_option('-o', '--outpath', default='css.csv', help='path to output directory, DEFAULT="css.csv"', metavar='/path/to/output.csv')
parser.add_option('-t', '--tag', default='', help='tag for output data file, DEFAULT=""', metavar='""')
parser.add_option('-P', '--pressures', default=False, help='comma-separated list of pressures [g/cm^3] at which to return the EoS data, DEFAULT=Auto', metavar=False)

opts, args = parser.parse_args()
eospath = str(args[0])
params = str(opts.params).split(',')
numpts = float(opts.numpts)
pmax = float(opts.pmax)
outpath = str(opts.outpath)
tag = str(opts.tag)
plist = str(opts.pressures).split(',')
if len(plist) > 1: plist = [float(ppt) for ppt in plist]

if not os.path.exists(os.path.dirname(outpath)): os.makedirs(os.path.dirname(outpath))

# LOAD EOS PARAMETERS

if len(params)>1 : # read parameters if entered manually

	[ptr, Dmu, cqm2] = [float(param) for param in params]
	
else: # otherwise, read parameters from file
	
	cssparams = np.genfromtxt(params[0],delimiter=',',names=True)
	
	[ptr, Dmu, cqm2] = [cssparams['p_tr'],cssparams['Delta_e'],cssparams['cqm2']]

# CALCULATE TRANSITION ENERGY DENSITY FROM LOW-DENSITY EOS AT TRANSITION PRESSURE

eosdat = np.genfromtxt(eospath,names=True,delimiter=',') # load low-density EoS data
lowrhodat = eosdat['baryon_density'] # rest-mass energy density in units of g/cm^3
lowpdat = eosdat['pressurec2'] # pressure in units of g/cm^3
lowmudat = eosdat['energy_densityc2'] # total energy density in units of g/cm^3

mulow = interp1d(lowpdat,lowmudat,kind='linear',bounds_error=False,fill_value=0)
rholow = interp1d(lowpdat,lowrhodat,kind='linear',bounds_error=False,fill_value=0)

mutr = mulow(ptr) # interpolate baryon and energy densities at onset of phase transition
rhotr = rholow(ptr)
plowmin = lowpdat[0] # lowest pressure in low-density EoS

# CONSTRUCT CONSTANT SOUND SPEED PART

paramszip = [ptr, mutr, Dmu, cqm2]
rhodat, mudat, pdat = css(paramszip, numpts, pmax, plist)
mu = interp1d(pdat,mudat,kind='linear',bounds_error=False,fill_value=0)

# JOIN CONSTANT SOUND SPEED AND LOW-DENSITY PARTS, THEN PRINT EOS DATA

unipdat, unimudat, unirhodat = [], [], []

i = 0
while lowpdat[i] < ptr: # save low-density EoS data below phase transition

	unipdat.append(lowpdat[i])
	unimudat.append(lowmudat[i])
	unirhodat.append(lowrhodat[i])
	i = i+1
	
unipdat.append(ptr) # save jump in energy density at phase transition
unimudat.append(mutr)
unirhodat.append(rhotr)

j = 0	
while pdat[j] < ptr: # skip constant sound speed part below phase transition

	j = j+1

while j < len(pdat): # then save constant sound speed data above phase transition

	unipdat.append(pdat[j])
	unimudat.append(mudat[j])
	unirhodat.append(rhodat[j])
	j = j+1

# PRINT EOS DATA

eosdat = np.column_stack((np.array(unipdat),np.array(unimudat),np.array(unirhodat)))
np.savetxt(outpath,eosdat,fmt='%.8e',delimiter=',',header='pressurec2,energy_densityc2,baryon_density',comments='')

with open(os.path.dirname(outpath)+'/params-'+os.path.basename(outpath),"w") as outfile:
	
	outfile.write('p_tr,Delta_e,cqm2 \n')
	outfile.write('{0},{1},{2} \n'.format(ptr,Dmu/mutr,cqm2)) # record params used
