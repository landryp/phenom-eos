#!/usr/bin/python
__doc__ = 'GETEOS_SPEC -- save EoS data for spectral EoS specified by its parameters'
__usage__ = 'geteos_spec'
__author__ = 'philippe.landry@ligo.org'
__date__ = '02-2019'

import numpy as np
from optparse import OptionParser
from phenomeos.get_spec import spec

parser = OptionParser(usage=__usage__, description=__doc__)
parser.add_option('-p', '--params', default='specparams.in', help='name of spec parameters input file OR comma-separated input parameters [gamma1,gamma2,gamma3,gamma4[,pref,muref[,xmax]]], DEFAULT=specparams.in', metavar='0.5,1.0,0.2,0.01')
parser.add_option('-m', '--xmax', default=6.57, help='maximum pressure to return in x=log10(p [g/cm^3]/pref) format, DEFAULT=6.57', metavar='6.57')
parser.add_option('-P', '--pref', default=False, help='reference pressure [g/cm^3] for spectral fit, DEFAULT="None"', metavar='pref')
parser.add_option('-M', '--muref', default=False, help='reference energy density [g/cm^3] for spectral fit, DEFAULT="None"', metavar='muref')
parser.add_option('-n', '--numpts', default=100, help='number of EoS data points to return, DEFAULT=100', metavar='100')
parser.add_option('-i', '--indir', default='./spec/in/', help='path to directory housing input parameters file, DEFAULT=./spec/in/', metavar='./spec/in/')
parser.add_option('-o', '--outdir', default='./spec/dat/', help='path to output directory, DEFAULT=./spec/dat/', metavar='./spec/dat/')
parser.add_option('-t', '--tag', default='', help='tag for output data file, DEFAULT=""', metavar='""')
parser.add_option('-x', '--xvals', default=False, help='comma-separated list of x values at which to return the EoS data, DEFAULT=Auto', metavar=False)
parser.add_option('-X', '--xmin', default=-4., help='lowest x value at which to return EoS data, DEFAULT=-4', metavar=-4.)

opts, args = parser.parse_args()
params = str(opts.params).split(',')
xmax = float(opts.xmax)
pref = opts.pref
if not pref==False: pref = float(pref)
muref = opts.muref
if not muref==False: muref = float(muref)
numpts = float(opts.numpts)
indir = str(opts.indir)
outdir = str(opts.outdir)
tag = str(opts.tag)
xlist = str(opts.xvals).split(',')
if len(xlist) > 1: xlist = [float(xpt) for xpt in xlist]
xmin = float(opts.xmin)

outfile1 = open(outdir+"eos/"+"spec_"+tag+".csv","w")
outfile2 = open(outdir+"params/"+"params_"+tag+".csv","w")

# LOAD EOS PARAMETERS

if len(params)>1: # read parameters if entered manually

	g0 = float(params[0])
	g1 = float(params[1])
	g2 = float(params[2])
	g3 = float(params[3])
	
	if len(params)>4:
	
		pref = float(params[4])
		muref = float(params[5])
		
		if len(params)>6:
		
			xmax = float(params[6])

else: # otherwise, read parameters from file

	specparams = np.genfromtxt(indir+params[0],delimiter=',',names=True)

	g0, g1, g2, g3 = [specparams['gamma0'],specparams['gamma1'],specparams['gamma2'],specparams['gamma3']]
	
	pref, muref = [specparams['pref'],specparams['muref']]

# CONSTRUCT SPECTRAL EOS

rhodat, mudat, pdat = spec(g0, g1, g2, g3, pref, muref, numpts, xmax, xmin, xlist)

# PRINT EOS DATA

outfile1.write('logpressurec2,pressurec2,energy_densityc2,baryon_density \n')
outfile2.write('gamma0,gamma1,gamma2,gamma3,pref,muref,xmax \n')
outfile2.write('{0},{1},{2},{3} \n'.format(g0,g1,g2,g3,pref,muref,xmax)) # record params used

for i in range(len(rhodat)): # print table of EoS data

	p = pdat[i]
	logp = np.log(p)
	mu = mudat[i]
	rho = rhodat[i]

	outfile1.write('{0},{1},{2},{3} \n'.format(logp,p,mu,rho))
