#!/usr/bin/python
__doc__ = 'GETEOS_PWP -- save EoS data for specified piecewise polytrope'
__usage__ = 'geteos_pwp'
__author__ = 'philippe.landry@ligo.org'
__date__ = '02-2019'

import numpy as np
from optparse import OptionParser
import os
from phenomeos.get_pwp import pwpoly

parser = OptionParser(usage=__usage__, description=__doc__)
parser.add_option('-p', '--params', default='pwpparams.in', help='path to pwp parameters input file OR comma-separated input parameters (e.g. 34.4,3.0,2.9,2.8), DEFAULT="pwpparams.in"', metavar='log10p1,Gamma1,Gamma2,Gamma3')
parser.add_option('-d', '--divrho', default=False, help='comma-separated dividing rest-mass densities [g/cm^3], DEFAULT="Automatic"', metavar='2.8e14,5.2e14')
parser.add_option('-n', '--numpts', default=100, help='number of EoS data points to return, DEFAULT=100', metavar='100')
parser.add_option('-m', '--pmax', default=1e17, help='maximum pressure to return [g/cm^3], DEFAULT=1e17', metavar='1e17')
parser.add_option('-o', '--outpath', default='pwp.csv', help='path to output directory, DEFAULT="pwp.csv"', metavar='/path/to/output.csv')
parser.add_option('-P', '--pressures', default=False, help='comma-separated list of pressures [g/cm^3] at which to return the EoS data, DEFAULT=Auto', metavar=False)
parser.add_option('-M', '--pmin', default=1., help='lowest pressure [g/cm^3] at which to return EoS data, DEFAULT=1', metavar=1.)

opts, args = parser.parse_args()
params = str(opts.params).split(',')
divrho = opts.divrho
if not divrho==False: divrho = [float(div) for div in divrho.split(',')]
numpts = float(opts.numpts)
pmax = float(opts.pmax)
outpath = str(opts.outpath)
plist = str(opts.pressures).split(',')
if len(plist) > 1: plist = [float(ppt) for ppt in plist]
pmin = float(opts.pmin)

if not os.path.exists(os.path.dirname(outpath)): os.makedirs(os.path.dirname(outpath))

# LOAD EOS PARAMETERS

if len(params)>1 : # read parameters if entered manually

	log10p1 = float(params[0])
	Gamma = params[1:]
	Gamma = [float(gamma) for gamma in Gamma]
	
	segs = len(params)-1
	Gname = ['Gamma'+str(i+1) for i in range(segs)]
	
else: # otherwise, read parameters from file

	pwpparams = np.genfromtxt(params[0],delimiter=',',skip_header=1)
	segs = len(pwpparams)-1
	
	pwpparams = np.genfromtxt(params[0],delimiter=',',names=True)
	
	log10p1 = pwpparams['log10p1']
	
	Gamma = np.zeros(segs)
	Gname = []
	for i in range(segs):
	
		Gname.append('Gamma'+str(i+1))
		Gamma[i] = pwpparams[Gname[i]]

# CONSTRUCT PIECEWISE POLYTROPE

rhodat, mudat, pdat = pwpoly(log10p1, Gamma, divrho, numpts, pmax, pmin, plist)

# PRINT EOS DATA

eosdat = np.column_stack((np.array(pdat),np.array(mudat),np.array(rhodat)))
np.savetxt(outpath,eosdat,fmt='%.8e',delimiter=',',header='pressurec2,energy_densityc2,baryon_density',comments='')

with open(os.path.dirname(outpath)+'/params-'+os.path.basename(outpath),"w") as outfile:
	outfile.write('log10p1,'+','.join(Gname)+'\n')
	outfile.write(str(log10p1)+','+','.join([str(gamma) for gamma in Gamma])+'\n') # record params used
